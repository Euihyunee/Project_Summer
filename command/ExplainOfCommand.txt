커맨드 패턴 

1. 실행될 기능을 캡슐화 -> 재사용성이 높은 클래스를 설계
   객체의 행위(메서드)를 클래스로 만들어 캡슐화 하는 패턴

2. 이벤트가 발생했을 때 실행될 기능이 다양하면서도 
   변경이 필요한 경우에 이벤트를 발생시키는 클래스를 
   변경하지 않고 재사용하고자 할 때 유용 

3. 어떤 객체(A)에서 다른 객체(B)의 메서드를 실행하려면 그 객체(B) 
   를 참조하고 있어야 하는 의존성이 발생한다.
 - 커맨드 패턴 적용시 의존성 제거 가능

4. 기능이 수정/변경이 있을 시 코드 수정없이 기능에 대한 클래스를 정의
   하면 되므로 시스템 확장성/유연성 좋아짐.

Interface 정의 
Heater : 히터 키는 메서드 정의
HeaterOnCommand : 히터 키는 명령을 클래스화하여 정의
OKGoogle : talk 메서드에서 Command 인터페이스의 run()메서드 실행 

